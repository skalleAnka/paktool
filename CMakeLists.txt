cmake_minimum_required(VERSION 3.12)

if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
    if (MINGW)
        set(VCPKG_TARGET_TRIPLET "arm64-mingw-static")
    elseif (WIN32)
        set(VCPKG_TARGET_TRIPLET "arm64-windows-static")
    endif()
else()
    if (MINGW)
        set(VCPKG_TARGET_TRIPLET "x64-mingw-static")
    elseif (WIN32)
        set(VCPKG_TARGET_TRIPLET "x64-windows-static")
    endif()
endif()

set(ENV{VCPKG_TARGET_TRIPLET} ${VCPKG_TARGET_TRIPLET})


if (NOT VCPKG_DIR AND NOT UNIX)    
    if (NOT DEFINED ENV{VCPKG_ROOT})
        set(VCPKG_DIR ${CMAKE_BINARY_DIR}/vcpkg)   
        set(VCPKG_ROOT ${VCPKG_DIR})
        if (NOT EXISTS "${CMAKE_BINARY_DIR}/vcpkg.zip")
            message(STATUS "Downloading vcpkg...${VCPKG_DIR}")
            file(DOWNLOAD "https://github.com/microsoft/vcpkg/archive/refs/heads/master.zip" "${CMAKE_BINARY_DIR}/vcpkg.zip")
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xzf "${CMAKE_BINARY_DIR}/vcpkg.zip")
            file(RENAME "${CMAKE_BINARY_DIR}/vcpkg-master" "${VCPKG_DIR}")
            execute_process(COMMAND ${CMAKE_COMMAND} -E chdir ${VCPKG_DIR} bootstrap-vcpkg.bat)
        endif()
    else()
        #Site install of VCPKG seems to be present
        set(VCPKG_ROOT ENV{VCPKG_ROOT})
    endif()
else()
    set(VCPKG_MANIFEST_MODE OFF)
endif()

if (VCPKG_ROOT)    
    set(CMAKE_TOOLCHAIN_FILE "${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
    set(VCPKG_MANIFEST_MODE ON)
endif()

project(paktool VERSION 1.0)
set(CMAKE_CXX_STANDARD 20)

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    add_compile_options(-Wall -Wextra -Wpedantic -Wno-parentheses)
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 13.0)
        message(FATAL_ERROR "GCC version must be at least 13.0")
    endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_compile_options(-Wall -Wextra -Wpedantic -Wno-unqualified-std-cast-call -Wno-logical-op-parentheses -Wno-switch)
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 16.0)
        message(FATAL_ERROR "Clang version must be at least 16.0")
    endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    #add_compile_options(/W4)
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 16.11)
        message(FATAL_ERROR "MSVC version must be at least 16.11")
    endif()
endif()

add_compile_definitions(PRIVATE $<$<CONFIG:Debug>:_DEBUG=1>)

add_subdirectory(src)
add_subdirectory(cli)

if (EXISTS "/etc/debian_version")
    set(CPACK_GENERATOR "DEB")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "skalleAnka")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libminizip1 (>= 1.1-8), libboost-program-options1.74.0, libboost-locale1.74.0, libboost-atomic1.74.0, libboost-chrono1.74.0, libboost-system1.74.0, libboost-thread1.74.0, libboost-date-time1.74.0, libicu72")
elseif (UNIX AND NOT APPLE)
    set(CPACK_GENERATOR "TGZ")
else()
    set(CPACK_GENERATOR "ZIP")
endif()

set(CPACK_PACKAGE_NAME "paktool")
set(CPACK_PACKAGE_VERSION "1.0.0")
set(CPACK_PACKAGE_DESCRIPTION "Tool for converting and extracting .pak and .pk3 used by Quake engines.")
set(CPACK_PACKAGE_CONTACT "thisemailis@fa.ke")

include(CPack)
